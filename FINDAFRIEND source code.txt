//package com.example.findafriend;
//project find a friend
import java.util.*;
import java.sql.*;
import eu.hansolo.tilesfx.tools.FlowGridPane;
import javafx.application.*;
import javafx.scene.*;
import javafx.stage.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import javafx.event.*;
import javafx.geometry.*;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
public class FindaFriend extends Application{
    TextField t;
    Label response;
    public static void main(String args[]){
        launch(args);
    }
    public void start(Stage myStage){
        FindaFriend g=new FindaFriend();
        myStage.setTitle("Find'a'Friend");
        FlowPane rootNode=new FlowPane(5,5);
        response=new Label("WELCOME");
        rootNode.setAlignment(Pos.CENTER);
        Scene myScene=new Scene(rootNode,500,500);
        myStage.setScene(myScene);
        Button login=new Button("LOGIN");
        Button signup=new Button("SIGN UP");
      login.setOnAction(new EventHandler<ActionEvent>(){
          public void handle(ActionEvent ae){
              g.Login(myStage);
        }
    });
      signup.setOnAction(new EventHandler<ActionEvent>() {
          @Override
          public void handle(ActionEvent actionEvent) {
              g.SignUp(myStage);
          }
      });
        Separator separator=new Separator();
        separator.setPrefWidth(180);
        rootNode.getChildren().addAll(response,login,signup,separator);
        myStage.show();
    }
    public void Login(Stage myStage){
        Validate v=new Validate();
        Homepage hp=new Homepage();
        myStage.setTitle("Find'a'Friend");
        FlowGridPane rootNode=new FlowGridPane(1,2);
       rootNode.setAlignment(Pos.CENTER);
       String UsrName;
        String Pasword;
        response=new Label("username");
        t=new TextField();
         t.setPromptText("USER NAME");
         t.setPrefColumnCount(15);
         t.setOnAction(new EventHandler<ActionEvent>(){
           public void handle(ActionEvent a){
             String  UserName=t.getText();
             v.uname(UserName);
           }
       });
        Label respo=new Label("password");
       TextField tt=new TextField();
        tt.setPromptText("PASSWORD");
        tt.setPrefColumnCount(15);
        tt.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String  Password=tt.getText();
                v.pswd(Password);
            }
        });
        Button login=new Button("LOGIN");

        login.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent ae){
                boolean validornot= false;
                try {
                    validornot = v.validate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if(validornot==true){
                   hp.displayhome(myStage);
               }
               else if(validornot==false){
                    Label unsuccessfull=new Label("username or password is incorrect");
                    rootNode.getChildren().add(unsuccessfull);
                }
            }
        });
        rootNode.setRowIndex(response, 0);
        rootNode.setColumnIndex(t, 1);
        rootNode.setRowIndex(respo, 1);
        rootNode.setColumnIndex(tt, 1);
        Scene myScene=new Scene(rootNode,500,500);
        myStage.setScene(myScene);
        Separator separator=new Separator();
        separator.setPrefWidth(180);
        rootNode.getChildren().addAll(response,t,respo,tt,separator,login);
        myStage.show();


    }
    public void SignUp(Stage myStage){
        FindaFriend g=new FindaFriend();
        Validate v=new Validate();
        myStage.setTitle("Find'a'Friend");
        FlowGridPane rootNode=new FlowGridPane(1,10);
      rootNode.setAlignment(Pos.CENTER);
        Scene myScene=new Scene(rootNode,500,500);
        myStage.setScene(myScene);
        Label MAIL=new Label("MAIL ID");
        Label UserName=new Label("USERNAME");
        Label Password=new Label("PASSWORD");
        Label ConfirmPassword=new Label("CONFIRM PASSWORD");
        Label interest1=new Label("INTEREST 1");
        Label interest2=new Label("INTEREST 2");
        TextField mailid=new TextField();
        mailid.setPrefColumnCount(15);
        TextField usname=new TextField();
        usname.setPrefColumnCount(15);
        TextField pswd=new TextField();
        pswd.setPrefColumnCount(15);
        TextField cnfrmpswd=new TextField();
        cnfrmpswd.setPrefColumnCount(15);
        TextField intst1=new TextField();
        intst1.setPrefColumnCount(15);
        TextField intst2=new TextField();
        intst2.setPrefColumnCount(15);
        rootNode.setRowIndex(MAIL, 0);
        rootNode.setColumnIndex(mailid, 1);
        rootNode.setRowIndex(UserName, 1);
        rootNode.setColumnIndex(usname, 1);
        rootNode.setRowIndex(Password, 2);
        rootNode.setColumnIndex(pswd, 1);
        rootNode.setRowIndex(ConfirmPassword, 3);
        rootNode.setColumnIndex(cnfrmpswd, 1);
        rootNode.setRowIndex(interest1, 4);
        rootNode.setColumnIndex(intst1, 1);
        rootNode.setRowIndex(interest2, 5);
        rootNode.setColumnIndex(intst2, 1);
        mailid.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String mail=mailid.getText();
                v.mail(mail);
            }
        });
        usname.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String Username=usname.getText();
                v.uname(Username);
            }
        });
        pswd.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
              String  Password=pswd.getText();
                v.pswd(Password);
            }
        });

       cnfrmpswd.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String confirmpassword=cnfrmpswd.getText();
                v.cnfrmpswd(confirmpassword);
            }
        });
        intst1.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String Interest1=intst1.getText();
                v.intrst1(Interest1);
            }
        });
        intst2.setOnAction(new EventHandler<ActionEvent>(){
            public void handle(ActionEvent a){
                String Interest2=intst2.getText();
                v.intrst2(Interest2);
            }
        });
        Button createaccount=new Button();
        createaccount.setText("Create Account");
        createaccount.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                try {
                    v.createacc();
                    Label successfull=new Label("Account successfully created please login ");
                    rootNode.getChildren().add(successfull);
                    g.Login(myStage);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

      Separator separator=new Separator();
      separator.setPrefWidth(180);
      rootNode.getChildren().addAll(MAIL,mailid,UserName,usname,Password,pswd,ConfirmPassword,cnfrmpswd,interest1,intst1,interest2,intst2,createaccount);
        myStage.show();


    }
}
class Validate{

    private String USERNAME,PASSWORD,MAIL,CONFIRMPASSWORD,INTEREST1,INTEREST2;
    String url="jdbc:mysql://localhost:3306/sys";
    //my username and password are removed from this code, 
    // can be replaced with the users database details who wanted to work on this project 
    String uname="";
    String pss="";
    public void uname(String username){
        USERNAME=username;
    }

    public void pswd(String password){
      PASSWORD=password;
    }
    public void cnfrmpswd(String cnpassword){
        CONFIRMPASSWORD=cnpassword;
    }
    public void mail(String mail){
        MAIL=mail;
    }
    public void intrst1(String intst1){
        intst1=intst1.replaceAll("\\s", "");
        INTEREST1=intst1.toLowerCase();
    }
    public void intrst2(String intst2){
        intst2=intst2.replaceAll("\\s", "");
        INTEREST2=intst2.toLowerCase();
    }
    public void createacc() throws  Exception {
        String query1 = "insert into findafriend values('" + USERNAME + "','" + PASSWORD + "')";
        String query2 = "insert into createaccount values('" + MAIL + "','" + USERNAME + "','" + INTEREST1 + "','" + INTEREST2 + "')";
        Connection con = DriverManager.getConnection(url, uname, pss);
        PreparedStatement ps;
        PreparedStatement pp;
        if (PASSWORD.equals(CONFIRMPASSWORD)) {
            pp = con.prepareStatement(query1);
            ps = con.prepareStatement(query2);
            pp.executeUpdate();
            ps.executeUpdate();
        }

    }
    public boolean validate() throws Exception{
        String query="select username,password from findafriend where username='"+USERNAME+"'and password='"+PASSWORD+"'";
        boolean flag=false;
        try {
           // Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(url, uname, pss);
            Statement st= con.createStatement();
            ResultSet rs=st.executeQuery(query);
            rs.next();
            String name=rs.getString(1);
            String password=rs.getString(2);
            if(name.equals(USERNAME)){
                if(password.equals(PASSWORD)){
                    flag=true;
                }
            }
            else{
                flag=false;
            }
        }
        catch(Exception e){
            System.out.println(e);
        }

        return flag;
    }
    public String searchinterest(String Interest) throws Exception{
        Interest=Interest.replaceAll("\\s","");
        Interest=Interest.toLowerCase();
        String query="select mailid from createaccount where Interest1='"+Interest+"' or Interest2='"+Interest+"'";
        Connection con = DriverManager.getConnection(url, uname, pss);
        Statement st= con.createStatement();
        ResultSet rs=st.executeQuery(query);
        if(rs.next()==false){
            return "";
        }
        String match=rs.getString("mailid");
        return match;
    }
    public void sendrequest(){
        Properties prop=new Properties();
        prop.put("mail.smtp.starttls.required", "true");
        prop.put("mail.smtp.ssl.protocols", "TLSv1.2");
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.port", "465");
        prop.put("mail.smtp.auth", "true");
        prop.put("mail.smtp.starttls.enable", "true");
        prop.put("mail.smtp.socketFactory.port","465");
//        prop.put("mail.smtp.starttls.required", "true");
//        prop.put("mail.smtp.ssl.protocols", "TLSv1.2");
        prop.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        prop.put("mail.smtp.starttls.required","false");
      //  prop.put("mail.smtp.starttls.enable","true");
        Session s=Session.getInstance(prop,new javax.mail.Authenticator(){
            protected PasswordAuthentication getPasswordAuthentication(){
                return new PasswordAuthentication("from","frompassword");
            }
        });
        try{
            Message msg=new MimeMessage(s);
            msg.setFrom(new InternetAddress("from"));
            msg.addRecipient(Message.RecipientType.TO,new InternetAddress("to"));
            msg.setSubject("sub");
            msg.setText("msg");
            Transport.send(msg);
        }
        catch(MessagingException e){
            e.printStackTrace();
        }

    }
}
class Homepage {
    public void displayhome(Stage myStage){
        Validate v=new Validate();
        myStage.setTitle("Find'a'Friend");
        FlowGridPane rootNode=new FlowGridPane(1,2);
        rootNode.setAlignment(Pos.CENTER);
        Scene myScene=new Scene(rootNode,500,500);
        myStage.setScene(myScene);
        Label lt=new Label("FIND YOUR FRIENDS BASED ON YOUR CURRENT INTERESTS");
        Label ll=new Label("Enter your current Interests");
        TextField t=new TextField();
        t.setAlignment(Pos.CENTER);
        t.setPromptText("Interest");
        t.setPrefColumnCount(15);
        rootNode.setRowIndex(ll, 0);
        rootNode.setColumnIndex(t, 1);
        Button find=new Button();
        find.setText("FIND");
        Button sendrequest=new Button();
        sendrequest.setText("SEND REQUEST");
        find.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                String interest=t.getText();
                try {
                    String s = v.searchinterest(interest);
                    Label result;
                    if(s.length()<1){
                        result= new Label("no matching interests found at this moment");
                        result.setAlignment(Pos.BASELINE_LEFT);
                        rootNode.getChildren().add(result);
                    }
                    else {
                        result = new Label("Your Interests matched with"+s);
                        sendrequest.setOnAction(new EventHandler<ActionEvent>() {
                            @Override
                            public void handle(ActionEvent actionEvent) {
                                v.sendrequest();
                            }
                        });
                        result.setAlignment(Pos.BASELINE_LEFT);
                        rootNode.getChildren().addAll(result,sendrequest);
                    }
                }
                catch(Exception e){
                    System.out.println(e);
                }
            }
        });
        Separator separator=new Separator();
        separator.setPrefWidth(180);
        rootNode.getChildren().addAll(lt,ll,t,find,separator);
        myStage.show();


    }
}